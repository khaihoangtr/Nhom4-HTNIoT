
bai1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000658  08000660  00001660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000658  08000658  00001660  2**0
                  CONTENTS
  4 .ARM          00000000  08000658  08000658  00001660  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000658  08000660  00001660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000658  08000658  00001658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800065c  0800065c  0000165c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000660  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000660  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cc9  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000708  00000000  00000000  00003359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  00003a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000199  00000000  00000000  00003d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000be16  00000000  00000000  00003ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021f3  00000000  00000000  0000fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003bbf4  00000000  00000000  00011eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0004dabe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b40  00000000  00000000  0004db7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0004e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000078  00000000  00000000  0004e6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000640 	.word	0x08000640

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000640 	.word	0x08000640

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f80d 	bl	8000240 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000244:	4b23      	ldr	r3, [pc, #140]	@ (80002d4 <SetSysClock+0x94>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a22      	ldr	r2, [pc, #136]	@ (80002d4 <SetSysClock+0x94>)
 800024a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 8000250:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <SetSysClock+0x98>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a20      	ldr	r2, [pc, #128]	@ (80002d8 <SetSysClock+0x98>)
 8000256:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800025a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800025c:	4b1d      	ldr	r3, [pc, #116]	@ (80002d4 <SetSysClock+0x94>)
 800025e:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <SetSysClock+0x94>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000264:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <SetSysClock+0x94>)
 8000266:	4a1b      	ldr	r2, [pc, #108]	@ (80002d4 <SetSysClock+0x94>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <SetSysClock+0x94>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a18      	ldr	r2, [pc, #96]	@ (80002d4 <SetSysClock+0x94>)
 8000272:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000276:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000278:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <SetSysClock+0x94>)
 800027a:	4a18      	ldr	r2, [pc, #96]	@ (80002dc <SetSysClock+0x9c>)
 800027c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800027e:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <SetSysClock+0x94>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a14      	ldr	r2, [pc, #80]	@ (80002d4 <SetSysClock+0x94>)
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000288:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800028a:	bf00      	nop
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <SetSysClock+0x94>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000298:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <SetSysClock+0xa0>)
 800029a:	f240 6202 	movw	r2, #1538	@ 0x602
 800029e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <SetSysClock+0x94>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <SetSysClock+0x94>)
 80002a6:	f023 0303 	bic.w	r3, r3, #3
 80002aa:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002ac:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <SetSysClock+0x94>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a08      	ldr	r2, [pc, #32]	@ (80002d4 <SetSysClock+0x94>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002b8:	bf00      	nop
 80002ba:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <SetSysClock+0x94>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f003 030c 	and.w	r3, r3, #12
 80002c2:	2b08      	cmp	r3, #8
 80002c4:	d1f9      	bne.n	80002ba <SetSysClock+0x7a>
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40007000 	.word	0x40007000
 80002dc:	08015410 	.word	0x08015410
 80002e0:	40023c00 	.word	0x40023c00

080002e4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d006      	beq.n	8000304 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 80002f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002fa:	4909      	ldr	r1, [pc, #36]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4313      	orrs	r3, r2
 8000300:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000302:	e006      	b.n	8000312 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	43db      	mvns	r3, r3
 800030c:	4904      	ldr	r1, [pc, #16]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 800030e:	4013      	ands	r3, r2
 8000310:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800

08000324 <delay>:
#define BUTTON_GPIO_PORT					GPIOC
#define BUTTON_GPIO_PIN						GPIO_Pin_13
#define BUTTON_PIN13						13
#define BUTTONControl_SetClock				RCC_AHB1Periph_GPIOC

void delay() {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000; i++);
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	e002      	b.n	8000336 <delay+0x12>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <delay+0x28>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d9f8      	bls.n	8000330 <delay+0xc>
}
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	0007a11f 	.word	0x0007a11f

08000350 <Led_init>:
static void Led_init(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDControl_SetClock, ENABLE);
 8000356:	2101      	movs	r1, #1
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ffc3 	bl	80002e4 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;
 800035e:	2320      	movs	r3, #32
 8000360:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000362:	2301      	movs	r3, #1
 8000364:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000366:	2302      	movs	r3, #2
 8000368:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800036a:	2300      	movs	r3, #0
 800036c:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800036e:	2301      	movs	r3, #1
 8000370:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
 8000372:	463b      	mov	r3, r7
 8000374:	4619      	mov	r1, r3
 8000376:	4803      	ldr	r0, [pc, #12]	@ (8000384 <Led_init+0x34>)
 8000378:	f000 f8af 	bl	80004da <GPIO_Init>

}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40020000 	.word	0x40020000

08000388 <Button_init>:
static void Button_init(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	// Khai báo biến thuộc kiểu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cấp xung clock hoạt động cho PORT A

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800038e:	2101      	movs	r1, #1
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ffa7 	bl	80002e4 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 8000396:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039a:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800039c:	2300      	movs	r3, #0
 800039e:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003a0:	2302      	movs	r3, #2
 80003a2:	717b      	strb	r3, [r7, #5]

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 80003a8:	463b      	mov	r3, r7
 80003aa:	4619      	mov	r1, r3
 80003ac:	4803      	ldr	r0, [pc, #12]	@ (80003bc <Button_init+0x34>)
 80003ae:	f000 f894 	bl	80004da <GPIO_Init>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40020800 	.word	0x40020800

080003c0 <LedControl_SetStatus>:

static void LedControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	807b      	strh	r3, [r7, #2]
 80003cc:	4613      	mov	r3, r2
 80003ce:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
 80003d0:	787b      	ldrb	r3, [r7, #1]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d102      	bne.n	80003dc <LedControl_SetStatus+0x1c>
		GPIOx->BSRRL = GPIO_PIN;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	887a      	ldrh	r2, [r7, #2]
 80003da:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 80003dc:	787b      	ldrb	r3, [r7, #1]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d102      	bne.n	80003e8 <LedControl_SetStatus+0x28>
		GPIOx->BSRRH = GPIO_PIN;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	887a      	ldrh	r2, [r7, #2]
 80003e6:	835a      	strh	r2, [r3, #26]
	}
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <ButtonRead_Status>:

static uint8_t ButtonRead_Status(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN) {
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	807b      	strh	r3, [r7, #2]
	uint8_t Read_Pin = 0x00;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]

	if ((GPIOx->IDR & GPIO_PIN) != (uint32_t) Bit_RESET) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	691a      	ldr	r2, [r3, #16]
 8000408:	887b      	ldrh	r3, [r7, #2]
 800040a:	4013      	ands	r3, r2
 800040c:	2b00      	cmp	r3, #0
 800040e:	d002      	beq.n	8000416 <ButtonRead_Status+0x22>
		Read_Pin = (uint8_t) Bit_SET;
 8000410:	2301      	movs	r3, #1
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	e001      	b.n	800041a <ButtonRead_Status+0x26>
	} else {
		Read_Pin = (uint8_t) Bit_RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]
	}
	return Read_Pin;
 800041a:	7bfb      	ldrb	r3, [r7, #15]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3714      	adds	r7, #20
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <main>:
int main(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 800042e:	2301      	movs	r3, #1
 8000430:	71fb      	strb	r3, [r7, #7]
	Led_init();
 8000432:	f7ff ff8d 	bl	8000350 <Led_init>
	Button_init();
 8000436:	f7ff ffa7 	bl	8000388 <Button_init>
	while (1) {

		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BTN_PRESS) {
 800043a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800043e:	4810      	ldr	r0, [pc, #64]	@ (8000480 <main+0x58>)
 8000440:	f7ff ffd8 	bl	80003f4 <ButtonRead_Status>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d104      	bne.n	8000454 <main+0x2c>
			delay();
 800044a:	f7ff ff6b 	bl	8000324 <delay>
			status++;
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	3301      	adds	r3, #1
 8000452:	71fb      	strb	r3, [r7, #7]
		}
		if (status % 2 == 0) {
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d107      	bne.n	8000470 <main+0x48>
			delay();
 8000460:	f7ff ff60 	bl	8000324 <delay>
			LedControl_SetStatus(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_HIGH);
 8000464:	2201      	movs	r2, #1
 8000466:	2120      	movs	r1, #32
 8000468:	4806      	ldr	r0, [pc, #24]	@ (8000484 <main+0x5c>)
 800046a:	f7ff ffa9 	bl	80003c0 <LedControl_SetStatus>
 800046e:	e7e4      	b.n	800043a <main+0x12>
		} else {
			delay();
 8000470:	f7ff ff58 	bl	8000324 <delay>
			LedControl_SetStatus(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_LOW);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	4802      	ldr	r0, [pc, #8]	@ (8000484 <main+0x5c>)
 800047a:	f7ff ffa1 	bl	80003c0 <LedControl_SetStatus>
		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BTN_PRESS) {
 800047e:	e7dc      	b.n	800043a <main+0x12>
 8000480:	40020800 	.word	0x40020800
 8000484:	40020000 	.word	0x40020000

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800048c:	f7ff fea2 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	@ (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	@ (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	@ (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	@ (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b6:	f000 f89f 	bl	80005f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff ffb5 	bl	8000428 <main>

080004be <LoopForever>:

LoopForever:
  b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   r0, =_estack
 80004c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004cc:	08000660 	.word	0x08000660
  ldr r2, =_sbss
 80004d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004d4:	2000001c 	.word	0x2000001c

080004d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC_IRQHandler>

080004da <GPIO_Init>:
 80004da:	b480      	push	{r7}
 80004dc:	b087      	sub	sp, #28
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e076      	b.n	80005e4 <GPIO_Init+0x10a>
 80004f6:	2201      	movs	r2, #1
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	429a      	cmp	r2, r3
 8000510:	d165      	bne.n	80005de <GPIO_Init+0x104>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2103      	movs	r1, #3
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	401a      	ands	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	4619      	mov	r1, r3
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d003      	beq.n	8000550 <GPIO_Init+0x76>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d12e      	bne.n	80005ae <GPIO_Init+0xd4>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	2103      	movs	r1, #3
 800055a:	fa01 f303 	lsl.w	r3, r1, r3
 800055e:	43db      	mvns	r3, r3
 8000560:	401a      	ands	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689a      	ldr	r2, [r3, #8]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	4619      	mov	r1, r3
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	431a      	orrs	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	b29b      	uxth	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	2301      	movs	r3, #1
 800058a:	408b      	lsls	r3, r1
 800058c:	43db      	mvns	r3, r3
 800058e:	401a      	ands	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	7992      	ldrb	r2, [r2, #6]
 800059c:	4611      	mov	r1, r2
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	b292      	uxth	r2, r2
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	b292      	uxth	r2, r2
 80005a8:	431a      	orrs	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68da      	ldr	r2, [r3, #12]
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2103      	movs	r1, #3
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	401a      	ands	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	4619      	mov	r1, r3
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d985      	bls.n	80004f6 <GPIO_Init+0x1c>
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <__libc_init_array>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000630 <__libc_init_array+0x38>)
 80005fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000634 <__libc_init_array+0x3c>)
 80005fe:	1b64      	subs	r4, r4, r5
 8000600:	10a4      	asrs	r4, r4, #2
 8000602:	2600      	movs	r6, #0
 8000604:	42a6      	cmp	r6, r4
 8000606:	d109      	bne.n	800061c <__libc_init_array+0x24>
 8000608:	4d0b      	ldr	r5, [pc, #44]	@ (8000638 <__libc_init_array+0x40>)
 800060a:	4c0c      	ldr	r4, [pc, #48]	@ (800063c <__libc_init_array+0x44>)
 800060c:	f000 f818 	bl	8000640 <_init>
 8000610:	1b64      	subs	r4, r4, r5
 8000612:	10a4      	asrs	r4, r4, #2
 8000614:	2600      	movs	r6, #0
 8000616:	42a6      	cmp	r6, r4
 8000618:	d105      	bne.n	8000626 <__libc_init_array+0x2e>
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000620:	4798      	blx	r3
 8000622:	3601      	adds	r6, #1
 8000624:	e7ee      	b.n	8000604 <__libc_init_array+0xc>
 8000626:	f855 3b04 	ldr.w	r3, [r5], #4
 800062a:	4798      	blx	r3
 800062c:	3601      	adds	r6, #1
 800062e:	e7f2      	b.n	8000616 <__libc_init_array+0x1e>
 8000630:	08000658 	.word	0x08000658
 8000634:	08000658 	.word	0x08000658
 8000638:	08000658 	.word	0x08000658
 800063c:	0800065c 	.word	0x0800065c

08000640 <_init>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr

0800064c <_fini>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr
