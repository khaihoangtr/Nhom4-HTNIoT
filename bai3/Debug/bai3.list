
bai3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000554  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e8  080006f0  000016f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e8  080006e8  000016f0  2**0
                  CONTENTS
  4 .ARM          00000000  080006e8  080006e8  000016f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e8  080006f0  000016f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e8  080006e8  000016e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006ec  080006ec  000016ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006f0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006f0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d59  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000708  00000000  00000000  00003479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d0  00000000  00000000  00003b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a6  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000be58  00000000  00000000  00003ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002323  00000000  00000000  0000fe56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003bcdf  00000000  00000000  00012179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0004de58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b8c  00000000  00000000  0004df18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0004eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000078  00000000  00000000  0004eae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006d0 	.word	0x080006d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006d0 	.word	0x080006d0

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f80d 	bl	8000240 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000244:	4b23      	ldr	r3, [pc, #140]	@ (80002d4 <SetSysClock+0x94>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a22      	ldr	r2, [pc, #136]	@ (80002d4 <SetSysClock+0x94>)
 800024a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 8000250:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <SetSysClock+0x98>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a20      	ldr	r2, [pc, #128]	@ (80002d8 <SetSysClock+0x98>)
 8000256:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800025a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800025c:	4b1d      	ldr	r3, [pc, #116]	@ (80002d4 <SetSysClock+0x94>)
 800025e:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <SetSysClock+0x94>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000264:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <SetSysClock+0x94>)
 8000266:	4a1b      	ldr	r2, [pc, #108]	@ (80002d4 <SetSysClock+0x94>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <SetSysClock+0x94>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a18      	ldr	r2, [pc, #96]	@ (80002d4 <SetSysClock+0x94>)
 8000272:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000276:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000278:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <SetSysClock+0x94>)
 800027a:	4a18      	ldr	r2, [pc, #96]	@ (80002dc <SetSysClock+0x9c>)
 800027c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800027e:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <SetSysClock+0x94>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a14      	ldr	r2, [pc, #80]	@ (80002d4 <SetSysClock+0x94>)
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000288:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800028a:	bf00      	nop
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <SetSysClock+0x94>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000298:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <SetSysClock+0xa0>)
 800029a:	f240 6202 	movw	r2, #1538	@ 0x602
 800029e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <SetSysClock+0x94>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <SetSysClock+0x94>)
 80002a6:	f023 0303 	bic.w	r3, r3, #3
 80002aa:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002ac:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <SetSysClock+0x94>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a08      	ldr	r2, [pc, #32]	@ (80002d4 <SetSysClock+0x94>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002b8:	bf00      	nop
 80002ba:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <SetSysClock+0x94>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f003 030c 	and.w	r3, r3, #12
 80002c2:	2b08      	cmp	r3, #8
 80002c4:	d1f9      	bne.n	80002ba <SetSysClock+0x7a>
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40007000 	.word	0x40007000
 80002dc:	08015410 	.word	0x08015410
 80002e0:	40023c00 	.word	0x40023c00

080002e4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d006      	beq.n	8000304 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 80002f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002fa:	4909      	ldr	r1, [pc, #36]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4313      	orrs	r3, r2
 8000300:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000302:	e006      	b.n	8000312 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	43db      	mvns	r3, r3
 800030c:	4904      	ldr	r1, [pc, #16]	@ (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 800030e:	4013      	ands	r3, r2
 8000310:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800

08000324 <main>:
/******************************************************************************/




int main(void_t) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
	u8_t byStatus = 1;
 800032a:	2301      	movs	r3, #1
 800032c:	71fb      	strb	r3, [r7, #7]
	buzzer_Init();
 800032e:	f000 f887 	bl	8000440 <buzzer_Init>
	button_Init();
 8000332:	f000 f8a3 	bl	800047c <button_Init>
	Led_init();
 8000336:	f000 f84b 	bl	80003d0 <Led_init>
	while (1) {

		if (buttonReadStatus(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == 0) {
 800033a:	2108      	movs	r1, #8
 800033c:	4817      	ldr	r0, [pc, #92]	@ (800039c <main+0x78>)
 800033e:	f000 f8d1 	bl	80004e4 <buttonReadStatus>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d104      	bne.n	8000352 <main+0x2e>
			delay();
 8000348:	f000 f82c 	bl	80003a4 <delay>
			byStatus++;
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	3301      	adds	r3, #1
 8000350:	71fb      	strb	r3, [r7, #7]
		}
		if (byStatus % 2 == 0) {
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d10e      	bne.n	800037c <main+0x58>
			delay();
 800035e:	f000 f821 	bl	80003a4 <delay>
			buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <main+0x7c>)
 800036a:	f000 f8a1 	bl	80004b0 <buzzerControlSetStatus>
			LedControl_SetStatus(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_HIGH);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000374:	4809      	ldr	r0, [pc, #36]	@ (800039c <main+0x78>)
 8000376:	f000 f849 	bl	800040c <LedControl_SetStatus>
 800037a:	e7de      	b.n	800033a <main+0x16>
		} else {
			delay();
 800037c:	f000 f812 	bl	80003a4 <delay>
			buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000386:	4806      	ldr	r0, [pc, #24]	@ (80003a0 <main+0x7c>)
 8000388:	f000 f892 	bl	80004b0 <buzzerControlSetStatus>
			LedControl_SetStatus(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_LOW);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000392:	4802      	ldr	r0, [pc, #8]	@ (800039c <main+0x78>)
 8000394:	f000 f83a 	bl	800040c <LedControl_SetStatus>
		if (buttonReadStatus(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == 0) {
 8000398:	e7cf      	b.n	800033a <main+0x16>
 800039a:	bf00      	nop
 800039c:	40020400 	.word	0x40020400
 80003a0:	40020800 	.word	0x40020800

080003a4 <delay>:
 * @func   delay
 * @brief  use when you want to delay
 * @param  None
 * @retval None
 */
void_t delay() {
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
	for (u32_t i = 0; i < 500000; i++);
 80003aa:	2300      	movs	r3, #0
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	e002      	b.n	80003b6 <delay+0x12>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3301      	adds	r3, #1
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <delay+0x28>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d9f8      	bls.n	80003b0 <delay+0xc>
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	0007a11f 	.word	0x0007a11f

080003d0 <Led_init>:

static void Led_init(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDControl_SetClock, ENABLE);
 80003d6:	2101      	movs	r1, #1
 80003d8:	2002      	movs	r0, #2
 80003da:	f7ff ff83 	bl	80002e4 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;
 80003de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e2:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80003e4:	2301      	movs	r3, #1
 80003e6:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003e8:	2302      	movs	r3, #2
 80003ea:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80003ec:	2300      	movs	r3, #0
 80003ee:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
 80003f4:	463b      	mov	r3, r7
 80003f6:	4619      	mov	r1, r3
 80003f8:	4803      	ldr	r0, [pc, #12]	@ (8000408 <Led_init+0x38>)
 80003fa:	f000 f8b6 	bl	800056a <GPIO_Init>

}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40020400 	.word	0x40020400

0800040c <LedControl_SetStatus>:
static void LedControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,uint8_t Status) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	807b      	strh	r3, [r7, #2]
 8000418:	4613      	mov	r3, r2
 800041a:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
 800041c:	787b      	ldrb	r3, [r7, #1]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d102      	bne.n	8000428 <LedControl_SetStatus+0x1c>
		GPIOx->BSRRL = GPIO_PIN;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	887a      	ldrh	r2, [r7, #2]
 8000426:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 8000428:	787b      	ldrb	r3, [r7, #1]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d102      	bne.n	8000434 <LedControl_SetStatus+0x28>
		GPIOx->BSRRH = GPIO_PIN;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	887a      	ldrh	r2, [r7, #2]
 8000432:	835a      	strh	r2, [r3, #26]
	}
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <buzzer_Init>:
 * @func   buzzer_Init
 * @brief  Initialize GPIO for buzzer
 * @param  None
 * @retval None
 */
static void_t buzzer_Init(void_t) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 8000446:	2101      	movs	r1, #1
 8000448:	2004      	movs	r0, #4
 800044a:	f7ff ff4b 	bl	80002e4 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 800044e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000452:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000454:	2301      	movs	r3, #1
 8000456:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000458:	2302      	movs	r3, #2
 800045a:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800045c:	2300      	movs	r3, #0
 800045e:	71bb      	strb	r3, [r7, #6]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000460:	2302      	movs	r3, #2
 8000462:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8000464:	463b      	mov	r3, r7
 8000466:	4619      	mov	r1, r3
 8000468:	4803      	ldr	r0, [pc, #12]	@ (8000478 <buzzer_Init+0x38>)
 800046a:	f000 f87e 	bl	800056a <GPIO_Init>

}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40020800 	.word	0x40020800

0800047c <button_Init>:
 * @func   button_Init
 * @brief  Initialize GPIO for button
 * @param  None
 * @retval None
 */
static void_t button_Init(void_t) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 8000482:	2101      	movs	r1, #1
 8000484:	2002      	movs	r0, #2
 8000486:	f7ff ff2d 	bl	80002e4 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 800048a:	2308      	movs	r3, #8
 800048c:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800048e:	2300      	movs	r3, #0
 8000490:	713b      	strb	r3, [r7, #4]


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000492:	2302      	movs	r3, #2
 8000494:	717b      	strb	r3, [r7, #5]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000496:	2301      	movs	r3, #1
 8000498:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 800049a:	463b      	mov	r3, r7
 800049c:	4619      	mov	r1, r3
 800049e:	4803      	ldr	r0, [pc, #12]	@ (80004ac <button_Init+0x30>)
 80004a0:	f000 f863 	bl	800056a <GPIO_Init>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40020400 	.word	0x40020400

080004b0 <buzzerControlSetStatus>:
 * @brief  control status buzzer
 * @param  Port, pin
 * @retval None
 */
static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin,
		u8_t byStatus) {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	807b      	strh	r3, [r7, #2]
 80004bc:	4613      	mov	r3, r2
 80004be:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (byStatus == GPIO_PIN_SET) {
 80004c0:	787b      	ldrb	r3, [r7, #1]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d102      	bne.n	80004cc <buzzerControlSetStatus+0x1c>
		pGPIOx->BSRRL = wGPIO_Pin;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	887a      	ldrh	r2, [r7, #2]
 80004ca:	831a      	strh	r2, [r3, #24]
	}
	if (byStatus == GPIO_PIN_RESET) {
 80004cc:	787b      	ldrb	r3, [r7, #1]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <buzzerControlSetStatus+0x28>
		pGPIOx->BSRRH = wGPIO_Pin;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	887a      	ldrh	r2, [r7, #2]
 80004d6:	835a      	strh	r2, [r3, #26]
	}
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <buttonReadStatus>:
 * @func   buttonReadStatus
 * @brief  Read status of button
 * @param  Port, Pin
 * @retval u8_t
 */
static u8_t buttonReadStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin) {
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	807b      	strh	r3, [r7, #2]
	u8_t Read_Pin = Bit_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]

	if ((pGPIOx->IDR & wGPIO_Pin) != (u32_t) Bit_RESET) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	691a      	ldr	r2, [r3, #16]
 80004f8:	887b      	ldrh	r3, [r7, #2]
 80004fa:	4013      	ands	r3, r2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <buttonReadStatus+0x22>
		Read_Pin = (u8_t) Bit_SET;
 8000500:	2301      	movs	r3, #1
 8000502:	73fb      	strb	r3, [r7, #15]
 8000504:	e001      	b.n	800050a <buttonReadStatus+0x26>
	} else {
		Read_Pin = (u8_t) Bit_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	73fb      	strb	r3, [r7, #15]
	}
	return Read_Pin;
 800050a:	7bfb      	ldrb	r3, [r7, #15]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800051c:	f7ff fe5a 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	@ (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	@ (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000546:	f000 f89f 	bl	8000688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff feeb 	bl	8000324 <main>

0800054e <LoopForever>:

LoopForever:
  b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800055c:	080006f0 	.word	0x080006f0
  ldr r2, =_sbss
 8000560:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000564:	2000001c 	.word	0x2000001c

08000568 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC_IRQHandler>

0800056a <GPIO_Init>:
 800056a:	b480      	push	{r7}
 800056c:	b087      	sub	sp, #28
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e076      	b.n	8000674 <GPIO_Init+0x10a>
 8000586:	2201      	movs	r2, #1
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d165      	bne.n	800066e <GPIO_Init+0x104>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	401a      	ands	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	4619      	mov	r1, r3
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	431a      	orrs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d003      	beq.n	80005e0 <GPIO_Init+0x76>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d12e      	bne.n	800063e <GPIO_Init+0xd4>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2103      	movs	r1, #3
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	401a      	ands	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	4619      	mov	r1, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa01 f303 	lsl.w	r3, r1, r3
 8000608:	431a      	orrs	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	b29b      	uxth	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	2301      	movs	r3, #1
 800061a:	408b      	lsls	r3, r1
 800061c:	43db      	mvns	r3, r3
 800061e:	401a      	ands	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	7992      	ldrb	r2, [r2, #6]
 800062c:	4611      	mov	r1, r2
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	b292      	uxth	r2, r2
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	b292      	uxth	r2, r2
 8000638:	431a      	orrs	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	68da      	ldr	r2, [r3, #12]
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	b29b      	uxth	r3, r3
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	2103      	movs	r1, #3
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	401a      	ands	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	79db      	ldrb	r3, [r3, #7]
 800065e:	4619      	mov	r1, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	431a      	orrs	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3301      	adds	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	2b0f      	cmp	r3, #15
 8000678:	d985      	bls.n	8000586 <GPIO_Init+0x1c>
 800067a:	bf00      	nop
 800067c:	371c      	adds	r7, #28
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <__libc_init_array>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	4d0d      	ldr	r5, [pc, #52]	@ (80006c0 <__libc_init_array+0x38>)
 800068c:	4c0d      	ldr	r4, [pc, #52]	@ (80006c4 <__libc_init_array+0x3c>)
 800068e:	1b64      	subs	r4, r4, r5
 8000690:	10a4      	asrs	r4, r4, #2
 8000692:	2600      	movs	r6, #0
 8000694:	42a6      	cmp	r6, r4
 8000696:	d109      	bne.n	80006ac <__libc_init_array+0x24>
 8000698:	4d0b      	ldr	r5, [pc, #44]	@ (80006c8 <__libc_init_array+0x40>)
 800069a:	4c0c      	ldr	r4, [pc, #48]	@ (80006cc <__libc_init_array+0x44>)
 800069c:	f000 f818 	bl	80006d0 <_init>
 80006a0:	1b64      	subs	r4, r4, r5
 80006a2:	10a4      	asrs	r4, r4, #2
 80006a4:	2600      	movs	r6, #0
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d105      	bne.n	80006b6 <__libc_init_array+0x2e>
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b0:	4798      	blx	r3
 80006b2:	3601      	adds	r6, #1
 80006b4:	e7ee      	b.n	8000694 <__libc_init_array+0xc>
 80006b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ba:	4798      	blx	r3
 80006bc:	3601      	adds	r6, #1
 80006be:	e7f2      	b.n	80006a6 <__libc_init_array+0x1e>
 80006c0:	080006e8 	.word	0x080006e8
 80006c4:	080006e8 	.word	0x080006e8
 80006c8:	080006e8 	.word	0x080006e8
 80006cc:	080006ec 	.word	0x080006ec

080006d0 <_init>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr

080006dc <_fini>:
 80006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006de:	bf00      	nop
 80006e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e2:	bc08      	pop	{r3}
 80006e4:	469e      	mov	lr, r3
 80006e6:	4770      	bx	lr
